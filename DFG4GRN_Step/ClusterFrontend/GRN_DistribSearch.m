%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GRN_DistribSearch
% This file contains the frontend to perform the distributed search
% to find good hyperparameter's for Piotr's state space algorithm.
% Currently, this code only supports a basic grid search, but other
% algorithms such as Simulated Annealing are planned.
% This file also contains the necessary methods to evaluate the output
% models.
% 
% Params:
%   out_dir - this is what to call the test.  The results will be
%              saved in a folder with this name.
%   num_models - this is the number of models to run per hyperparamter
%                selection.  This should be between 20 and 100.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
function GRN_DistribSearch(out_dir, script_name, num_models, ...
  meas_name, par1, var1range, par2, var2range, par3, var3range)

 
% Parameters
% ----------

% Number of times to run each hyperparameter combination
% so we can average across them.
if (nargin < 3)
  num_models = 20;
end
if (nargin < 4)
  meas_name = 'error_trend_r2';
end
if (nargin < 6)
  par1 = 'gamma';
  var1range = [0.01 0.05 0.1 0.5 1];
end
if (nargin < 8)
  par2 = '';
  var2range = [];
end
if (nargin < 10)
  par3 = '';
  var3range = [];
end

date_string = datestr(clock, 'yyyy-mm-dd_HH-MM-ss');


% Hyperparameter selection
% ------------------------
 
% Coarse grid search
fprintf(1, 'GRN: optimize %s %s %s on coarse grid...\n', par1, par2, par3);
out_coarse = strcat(out_dir, '_', date_string, '_coarse');
[best_meas_coarse, ...
  best_val1_coarse, best_val2_coarse, best_val3_coarse] = ...
  GridSearch(script_name, out_coarse, num_models, meas_name, ...
  par1, var1range, par2, var2range, par3, var3range);
    
fprintf(1, 'GRN: best %s=%g for %s=%g', ...
  meas_name, best_meas_coarse, par1, best_val1_coarse);
if ~isempty(par2)
  fprintf(1, ', %s=%g', par2, best_val2_coarse);
end
if ~isempty(par3)
  fprintf(1, ', %s=%g', par3, best_val3_coarse);
end
fprintf(1, '\n');


%Fine Grid Search below is commented (2017 - 08 -10)
% Refine the coarse grids
%var1range = RefineGrid(var1range, best_val1_coarse);
%if ~isempty(par2)
%  var2range = RefineGrid(var2range, best_val2_coarse);
%end
%if ~isempty(par3)
%  var3range = RefineGrid(var3range, best_val3_coarse);
%end

% Fine grid search
%fprintf(1, 'GRN: optimize %s %s %s on fine grid...\n', par1, par2, par3);
%out_fine = strcat(out_dir, '_', date_string, '_fine');
%[best_meas_fine, ...
%  best_val1_fine, best_val2_fine, best_val3_fine] = ...
%  GridSearch(script_name, out_fine, num_models, meas_name, ...
%  par1, var1range, par2, var2range, par3, var3range);

%fprintf(1, 'GRN: best %s=%g for %s=%g', ...
%  meas_name, best_meas_fine, par1, best_val1_fine);
%if ~isempty(par2)
%  fprintf(1, ', %s=%g', par2, best_val2_fine);
%end
%if ~isempty(par3)
%  fprintf(1, ', %s=%g', par3, best_val3_fine);
%end
%fprintf(1, '\n');


exit
end


% -------------------------------------------------------------------------
% Code to evaluate the models generated by grid search.  Assume that they
% were saved in a directory in the out_dir dir with the same name as out_dir
% and are numbered sequentially.
% Given a file that contains N number of models, go through them extracting
% the best epoch.  Then average that epoch with the best epoch from the
% other models.
% -------------------------------------------------------------------------
function [best_meas, best_val1, best_val2, best_val3] = ...
  EvalModels(out_dir, meas_name, par1, par2, par3)

% Get the list of Matlab files
files = dir([out_dir '/*.mat']);

% Inspect all results
best_meas = -inf;
best_val1 = -inf;
best_val2 = -inf;
best_val3 = -inf;
for i = 1:length(files)
  % Get the MODEL and METER_INFER_TEST variables from file <i>
  d = load(sprintf('%s/%s', out_dir, files(i).name));

  % Evaluate measure
  meas = eval(['d.METER_INFER_TEST{end-1}.last_' meas_name ';']);
  if (meas > best_meas)
    best_meas = meas;

    % Evaluate first parameter
    best_val1 = eval(['d.params.' par1 ';']);

    % Evaluate second parameter?
    if ~isempty(par2)
      best_val2 = eval(['d.params.' par2 ';']);
    end

    % Evaluate third parameter?
    if ~isempty(par3)
      best_val3 = eval(['d.params.' par3 ';']);
    end
  end
end
 
end


% -------------------------------------------------------------------------
% Grid search code.  This code will generate and start the hyperparameter
% selections on SGE.
% ------------------------------------------------------------------------
function [best_meas, best_val1, best_val2, best_val3] = ...
  GridSearch(script_name, out_dir, num_models, meas_name, ...
  par1, var1range, par2, var2range, par3, var3range)


% Paths
%shell_script = 'grn_debug_submit.sh';
shell_script = 'grn_submit.sh';
path_to_scripts = which('GRN_DistribSearch');
idx = strfind(path_to_scripts,'/');
path_to_scripts = path_to_scripts(1:idx(length(idx))-1);

mkdir(out_dir);

% Loop over the first parameter
jobs_count = 0;
for i = 1:length(var1range)
  val1 = var1range(i);

  % Is there a second parameter?
  if ~isempty(par2)

    % Grid search on a second parameter
    for j = 1:length(var2range)
      val2 = var2range(j);

      % Is there a third parameter?
      if ~isempty(par3)

        % Grid search on a third parameter
        for k = 1:length(var3range)
          val3 = var3range(k);
        
          fprintf(1, 'GRN: Testing %s=%g, %s=%g, %s=%g, %g times...\n', ...
            par1, val1, par2, val2, par3, val3, num_models);
          out_file = sprintf('%s/%s%g_%s%g_%s%g.mat', ...
            out_dir, par1, val1, par2, val2, par3, val3);
          command = sprintf('%s/%s %s %s %s %d %s %g %s %g %s %g', ...
            path_to_scripts, shell_script, path_to_scripts, ...
            script_name, out_file, num_models, ...
            par1, val1, par2, val2, par3, val3);
          system(command);
          jobs_count = jobs_count + 1;
        end
      else

        % No third parameter
        fprintf(1, 'GRN: Testing %s=%g, %s=%g, %g times...\n', ...
          par1, val1, par2, val2, num_models);
        out_file = sprintf('%s/%s%g_%s%g.mat', ...
          out_dir, par1, val1, par2, val2);
        command = sprintf('%s/%s %s %s %s %d %s %g %s %g', ...
          path_to_scripts, shell_script, path_to_scripts, ...
          script_name, out_file, num_models, par1, val1, par2, val2);
        system(command);
        jobs_count = jobs_count + 1;
      end
    end
  else

    % No second nor third parameter
    fprintf(1, 'GRN: Testing %s=%g %g times...\n', par1, val1, num_models);
    out_file = sprintf('%s/%s%g.mat', out_dir, par1, val1);
    command = sprintf('%s/%s %s %s %s %d %s %g', ...
      path_to_scripts, shell_script, path_to_scripts, ...
      script_name, out_file, num_models, par1, val1);
    system(command);
    jobs_count = jobs_count + 1;
  end
end

% Wait for the jobs to complete
fprintf(1, 'Waiting for worker functions to return...\n');
jobs_completed = (length(dir([out_dir '/*.mat'])));
while (jobs_completed < jobs_count)
  % When counting the jobs, include the .txt file
  jobs_completed = (length(dir([out_dir '/*.mat'])));
  fprintf(1,'%3g out of %3g have returned...\n', ...
    jobs_completed, jobs_count);
  pause(5)
end
fprintf(1,'SUCCESS: all %g jobs have returned...\n', jobs_completed);

% Evaluate the jobs
[best_meas, best_val1, best_val2, best_val3] = ...
  EvalModels(out_dir, meas_name, par1, par2, par3);

fprintf(1, 'Best %s=%g at %s=%g', meas_name, best_meas, par1, best_val1);
if ~isempty(par2)
  fprintf(1, ', %s=%g', par2, best_val2);
end
if ~isempty(par3)
  fprintf(1, ', %s=%g', par3, best_val3);
end
fprintf(1, '\n');

end


%--------------------------------------------------------------------------
% Refine a grid around the best value.
%--------------------------------------------------------------------------
function varRange = RefineGrid(varRange, best_val)

% Find the matching value of the parameter
[dummy, ind] = find(varRange == best_val);

% Select "neighbors"
n = length(varRange);
if (ind == 1)
  indNeighbors = [1, min(n, 3)];
elseif (ind == n)
  indNeighbors = [max(1, n-2), n];
else
  indNeighbors = [max(1, ind-2), min(n, ind+2)];
end

% Interpolate linearly 10 parameter values
val1 = varRange(indNeighbors(1));
val2 = varRange(indNeighbors(2));
varRange = linspace(val1, val2, 10);

end


%--------------------------------------------------------------------------
% Simulated annealing algorithm.  The goal of this is to try to use SA to
% find out optimal hyperparameters as an alternative to GridSearch.
%--------------------------------------------------------------------------
function [best_meas, best_val1, best_val2, best_val3] = ...
  SimulatedAnnealing(script_name, out_dir, num_models, meas_name, ...
  par1, var1range, par2, var2range, par3, var3range)

error('TODO');

end
